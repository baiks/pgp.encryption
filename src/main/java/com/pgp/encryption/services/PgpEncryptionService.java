package com.pgp.encryption.services;


import org.bouncycastle.openpgp.PGPException;
import org.bouncycastle.openpgp.PGPPublicKey;

import java.io.IOException;
import java.io.InputStream;
import java.security.NoSuchProviderException;
import java.security.SignatureException;

public interface PgpEncryptionService {
    byte[] encrypt(final byte[] clearData, final PGPPublicKey encKey) throws IOException, PGPException;

    /**
     * Solution 1 - Decrypts the files according to the parameters passed.
     *
     * @param encrypted The byte-array of the encrypted file to be decrypted.
     * @param password  password of the PGP-Private key.
     * @param pvtKey    Private Key (in {@link InputStream} format). Please trim off
     *                  'BEGIN/END PRIVATE KEY' tags & the checksum (anything after the equal-sign at
     *                  the tail-end of the private-key).
     * @return the primitive variant of the {@link Byte} array.
     * @throws IOException
     * @throws PGPException
     */
    InputStream decrypt(final InputStream encrypted, final String password, final InputStream pvtKey) throws IOException, PGPException;

    /**
     * In light of the greater-complexities & error-prone realizations of the Solution 1
     * a need for simpler version of the PGP-Decryption was explored and this end result is as defined below.
     * Please DO NOT mess around with the PGP-Version-Dependencies in the POM file, unless fully tested on localhost
     * with Unit & Integration tests.
     *
     * @param encryptedFileBytes byte-array of the encrypted file.
     * @param password           tim-off white-spaces from the password. typical/common errors often experienced.
     * @param privateKey         without the 'BEGIN/END PRIVATE KEY' tags. Trim off 'BEGIN/END PRIVATE KEY' tags
     *                           & the checksum (anything after the equal-sign at the tail-end of the private-key).
     * @return {@link InputStream} of the decrypted contents of the file.
     * @throws PGPException
     * @throws IOException
     * @throws NoSuchProviderException
     */
    InputStream decrypt(InputStream encryptedFileBytes, String password, String privateKey) throws PGPException, IOException, NoSuchProviderException;

    void decryptArmoredAndVerifySignature(String password, String pathToEncryptedFile, String outputFilePathWithExtension) throws IOException;

    /**
     * Use this decryption method when the PGP file is encrypted with OnePassSignature.
     * The PGP file is decrypted & the signature immediately verified.
     * <p>
     * Note: Do not use this method when the encrypted PGP file is not signed.
     *
     * @param encrypted encrypted contents/data
     * @param password  for the Private Key
     * @param pvtKey    Private Key in String format.
     * @param pubKey    Public Key in String format.
     * @param armored   ASCII Armored PGP-Message encrypted contents?
     * @return successfully decrypted contents(in Byte Array) of the PGP File, after a successful signature verification.
     * @throws IOException        Missing PGP Data
     * @throws PGPException       thrown when unidentified data packets have been found in the PGPObjectFactory.
     * @throws SignatureException when the signature verification fails.
     */
    byte[] decryptAndVerifySignature(final byte[] encrypted, final String password, final InputStream pvtKey, InputStream pubKey, Boolean armored) throws IOException, PGPException, SignatureException;

    byte[] decryptArmoredAndVerifySignature(final InputStream opsEncrypted, final InputStream pvtKey, final char[] passwd, final InputStream pubKey) throws IOException, NoSuchProviderException, SignatureException, PGPException;

    byte[] encrypt(final byte[] clearData, final String publicKey, final String privateKey, final String privateKeyPass, final String fileName) throws IOException, PGPException, SignatureException;

    /**
     * OnePass Encryption which first signs the contents & followed by encryption of the clearData.
     * OnePass encryption methodology is a sequence of steps done concurrently, starting with signature signing
     * and then lastly with file encryption in a single execution of this method.
     * <p>
     * Sign with the private Key & encrypt with the public key.
     *
     * @param clearData      the content to be signed & encrypted.
     * @param publicKey      public key (From the Client) proposed to be used for encryption.
     * @param privateKey     Private key which must be generated by Equity Bank. Private key is used for signature signing.
     * @param privateKeyPass passphrase needed to unlock the secured private key. This passphrase is accompanied by the Private-Key.
     * @param fileName       Filename the file encrypted/generated PGP File.
     * @return Signed & Encrypted contents (using One-Pass signature signing & encryption) in byte array.
     * @throws IOException
     * @throws PGPException
     * @throws SignatureException
     */
    byte[] signAndEncrypt(final byte[] clearData, final String publicKey, final String privateKey, final String privateKeyPass, final String fileName) throws IOException, PGPException, SignatureException;
}
